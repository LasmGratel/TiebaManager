#pragma once
#include <ConfigFile.h>
#include <StringHelper.h>
#include <opencv2\core\mat.hpp>
#include "Update.h"


// 配置文件路径
extern CString	GLOBAL_CONFIG_PATH;	// 程序运行时初始化
extern CString	USER_PROFILE_PATH;	// 确定贴吧时初始化
extern CString	OPTIONS_PATH;
extern CString	USERS_PATH;			// 确定贴吧时初始化
extern CString	CURRENT_USER_PATH;	// 确定贴吧时初始化
extern CString	COOKIE_PATH;		// 确定贴吧时初始化
extern CString	CACHE_PATH;			// 确定贴吧时初始化


// 全局配置
class CGlobalConfig : public CConfigBase
{
public:
	COption<BOOL> m_firstRun;			// 第一次运行
	COption<BOOL> m_firstRunAfterUpdate;// 更新后第一次运行
	COption<CString> m_currentUser;		// 当前账号
	COption<BOOL> m_autoUpdate;			// 自动更新

	CGlobalConfig()
		: CConfigBase("Global"),
		m_firstRun("FirstRun", TRUE),
		m_firstRunAfterUpdate("FirstRunAfter" + CStringA(UPDATE_CURRENT_VERSION_A), TRUE),
		m_currentUser("UserName", _T("[NULL]"), [](const CString& value)->BOOL{ return value != _T("") && PathFileExists(USERS_PATH + value + _T("\\ck.xml")); }),
		m_autoUpdate("AutoUpdate", TRUE)
	{
		m_options.push_back(&m_firstRun);
		m_options.push_back(&m_firstRunAfterUpdate);
		m_options.push_back(&m_currentUser);
		m_options.push_back(&m_autoUpdate);
	}
};
extern CGlobalConfig g_globalConfig;

// 用户配置
class CUserConfig : public CConfigBase
{
public:
	COption<CString> m_plan;		// 当前方案
	COption<CString> m_forumName;	// 贴吧名

	CUserConfig()
		: CConfigBase("User"),
		m_plan("Plan", _T("默认")),
		m_forumName("ForumName")
	{
		m_options.push_back(&m_plan);
		m_options.push_back(&m_forumName);
	}
};
extern CUserConfig g_userConfig;

// 方案
class CPlan : public CConfigBase
{
public:
	struct Keyword : RegexText
	{
		BOOL forceToConfirm;	// 强制确认
		int trigCount;			// 触发次数
	};

	struct NameImage
	{
		CString name;
		cv::Mat img;
	};
	
public:
	CCriticalSection m_optionsLock; // 方案临界区
	BOOL m_updateImage; // 读取后更新违规图片

	COption<int>		m_scanInterval;			// 扫描间隔
	COption<BOOL>		m_onlyScanTitle;		// 只扫描标题
	COption<int>		m_scanPageCount;		// 扫描最后页数
	COption<BOOL>		m_briefLog;				// 只输出删帖封号
	COption<int>		m_threadCount;			// 线程数
	COption<BOOL>		m_autoSaveLog;			// 自动保存日志
	COption<int>		m_illegalLevel;			// 违规等级
	COption<BOOL>		m_delete;				// 删帖
	COption<BOOL>		m_banID;				// 封ID
	COption<BOOL>		m_defriend;				// 拉黑
	COption<float>		m_deleteInterval;		// 删帖间隔
	COption<int>		m_banDuration;			// 封禁时长
	COption<CString>	m_banReason;			// 封号原因
	COption<int>		m_banTrigCount;			// 封禁违规次数
	COption<int>		m_defriendTrigCount;	// 拉黑违规次数
	COption<BOOL>		m_confirm;				// 操作前提示
	COption<BOOL>		m_wapBanInterface;		// 封禁用WAP接口
	COption<BOOL>		m_autoLoopBan;			// 自动循环封
	COption<vector<Keyword> >	m_keywords;		// 违规内容
	vector<NameImage>			m_images;		// 违规图片
	COption<CString>	m_imageDir;				// 违规图片目录
	COption<double>		m_SSIMThreshold;		// 阈值
	COption<vector<RegexText> >	m_blackList;	// 屏蔽用户
	COption<set<CString> >		m_whiteList;	// 信任用户
	COption<vector<RegexText> >	m_whiteContent;	// 信任内容
	COption<set<CString> >		m_trustedThread;// 信任主题

	CPlan();
	void OnChange(){ m_optionsLock.Lock(); }
	void PostChange();
};
extern CPlan g_plan;
#ifdef TIEBA_MANAGER_EXPORTS
#undef HELPER_API
#define HELPER_API __declspec(dllexport)
#endif
DECLEAR_BOTH(CPlan::Keyword)
DECLEAR_BOTH(vector<CPlan::Keyword>)
#ifdef TIEBA_MANAGER_EXPORTS
#undef HELPER_API
#define HELPER_API __declspec(dllimport)
#endif


// 保存当前账号配置
void SaveCurrentUserProfile();
// 设置当前账号
void SetCurrentUser(const CString& userName, BOOL save);
